// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email              String             @unique @db.VarChar(255)
  encryptedPassword  String
  name               String?            @unique @db.VarChar(255)
  campaigns          UsersOnCampaigns[]
  userConnections    Connection[]       @relation("UserConnections")
  contactConnections Connection[]       @relation("ContactConnections")
  fromInvitations    Invitation[]       @relation("FromInvitations")
  toInvitations      Invitation[]       @relation("ToInvitations")
}

model Campaign {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String
  activities      Activity[]
  users           UsersOnCampaigns[]
  cityEventStatus EventStatus        @default(Incomplete)
  roadEventStatus EventStatus        @default(Incomplete)
  location        Location           @relation(fields: [locationId], references: [id])
  locationId      Int
}

model UsersOnCampaigns {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  role Role @default(Member)

  @@id([campaignId, userId])
}

model Location {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  tag      String
  campaign Campaign[]

  @@unique([tag])
  @@index([tag])
}

model Activity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId Int

  data Json
  type ActivityType
}

model Connection {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contact   User @relation("ContactConnections", fields: [contactId], references: [id])
  contactId Int
  user      User @relation("UserConnections", fields: [userId], references: [id])
  userId    Int

  @@id([contactId, userId])
}

model Invitation {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  declinedAt DateTime

  from   User @relation("FromInvitations", fields: [fromId], references: [id])
  fromId Int
  to     User @relation("ToInvitations", fields: [toId], references: [id])
  toId   Int

  @@id([fromId, toId])
}

enum Role {
  Member
  Admin
  Owner
}

enum EventStatus {
  Complete
  Incomplete
}

enum ActivityType {
  CampaignCreated
  EventCompleted
  Traveled
}
